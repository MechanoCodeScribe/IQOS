from aiogram.fsm.context import FSMContext
from states.my_states import GetOrderState
from aiogram import types, Router, F
from checker.check_funcs import check_format, check_age
from database.db_actions import db_check_user, add_order_to_db
from keyboards.keyboards_collection import exit_keyboard, yes_no_keyboard, exit_back_keyboard, items_exit_keyboard, location_share_keyboard
from get_data.data_request import incorrect_date_format

router = Router()


@router.message(GetOrderState.birthday_input, F.text == '–ù–µ—Ç')
async def get_order(message: types.Message, state: FSMContext):
    """
        Handle user's choice when they don't confirm their age.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The state machine context.
    """
    db_result = await db_check_user(message.from_user.id)
    if db_result:
        pass
    else:
        key = await exit_keyboard()
        await message.answer('–†–∞–¥ –≤—Å—Ç—Ä–µ—á–µ! üëãüèª –Ø —á–∞—Ç-–±–æ—Ç PETPO CLUB.\n–ü–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É '
                             '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∞ —è –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ—Å—á–∏—Ç–∞—é, '
                             '—á—Ç–æ –≤–∞–º —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç üòâ–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì', reply_markup=key)

        await state.set_state(GetOrderState.birthday_input)


@router.message(GetOrderState.name_input, F.text == '–ù–∞–∑–∞–¥')
async def delete_birthday(message: types.Message, state: FSMContext):
    """
        Handle the user's choice to go back and delete the previously entered birthday.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The state machine context.
    """
    await state.update_data(birthday=None)
    key = await exit_keyboard()
    await message.answer('–†–∞–¥ –≤—Å—Ç—Ä–µ—á–µ! üëãüèª –Ø —á–∞—Ç-–±–æ—Ç PETPO CLUB.\n–ü–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É '
                         '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∞ —è –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ—Å—á–∏—Ç–∞—é, '
                         '—á—Ç–æ –≤–∞–º —É–∂–µ –µ—Å—Ç—å 18 –ª–µ—Ç üòâ–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì', reply_markup=key)

    await state.set_state(GetOrderState.birthday_input)


@router.message(GetOrderState.city_input, F.text == '–ù–∞–∑–∞–¥')
async def delete_name(message: types.Message, state: FSMContext):
    """
        Handle the user's choice to go back and delete the previously entered name.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The state machine context.
    """
    await state.update_data(name=None)
    key = await exit_back_keyboard()
    await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ', reply_markup=key)

    await state.set_state(GetOrderState.name_input)


@router.message(GetOrderState.item_input, F.text == '–ù–∞–∑–∞–¥')
async def delete_city(message: types.Message, state: FSMContext):
    """
        Handle the user's choice to go back and delete the previously entered city.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The state machine context.
    """
    user_data = await state.get_data()
    name = user_data['name']
    await state.update_data(city=None)
    key = await exit_back_keyboard()
    await message.answer(f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}! –ß—É–≤—Å—Ç–≤—É—é, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è! üôÇ\n\nüëçüèº –£—Ä–∞!! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–ø–æ—Å–æ–±—ã '
                         f'–ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ê –≤ –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?', reply_markup=key)

    await state.set_state(GetOrderState.city_input)


@router.message(GetOrderState.address_input, F.text == '–ù–∞–∑–∞–¥')
async def delete_item(message: types.Message, state: FSMContext):
    """
        Handle the user's choice to go back and delete the previously entered item.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The state machine context.
    """
    user_data = await state.get_data()
    city = user_data['city']
    await state.update_data(item=None)
    key = await items_exit_keyboard()
    await message.answer(
        f'{city} - –ö–ª–∞—Å—Å–Ω—ã–π –≥–æ—Ä–æ–¥! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ —Ç–æ –±—ã —è —Å–∞–º –¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n–ù–æ —è –∑–Ω–∞—é –ª—é–¥–µ–π –∏–∑ –Ω–∞—à–µ–π '
        f'–∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç.üï∫üèº\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:',
        reply_markup=key)
    await state.set_state(GetOrderState.item_input)


async def incorrect_age_order(message: types.Message):
    """
        Handle the case when a user doesn't meet the age requirement for making an order.

        Args:
            message (types.Message): The message from the user.
    """
    await message.answer(
        '–ö–∞–∫ –≤—ã –º–æ–ª–æ–¥—ã! üòâ\n\n–ù–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Ç–∞–±–∞–∫–∞ –∏–ª–∏ –∏–Ω–æ–π '
        '–Ω–∏–∫–æ—Ç–∏–Ω–æ—Å–æ–¥–µ—Ä–∂–∞—â–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.\n\n–í–∞—à —á–∞—Ç-–±–æ—Ç –†–ï–¢–†–û.')


@router.message(GetOrderState.birthday_input, F.text == '–í—ã–π—Ç–∏')
@router.message(GetOrderState.name_input, F.text == '–í—ã–π—Ç–∏')
@router.message(GetOrderState.city_input, F.text == '–í—ã–π—Ç–∏')
@router.message(GetOrderState.item_input, F.text == '–í—ã–π—Ç–∏')
@router.message(GetOrderState.address_input, F.text == '–í—ã–π—Ç–∏')
async def exit_from_order(message: types.Message):
    """
        Handle the user's request to exit from the order creation process.

        Args:
            message (types.Message): The message from the user.
    """
    db_result = await db_check_user(message.from_user.id)
    if db_result:
        pass
    else:
        key = await yes_no_keyboard()
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?', reply_markup=key)


@router.message(GetOrderState.name_input, F.text == '–ù–µ—Ç')
@router.message(GetOrderState.birthday_input)
async def get_name_data(message: types.Message, state: FSMContext):
    """
        Handle user data input for the user's name during the order creation process.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The FSM context for maintaining conversation state.
    """
    user_data = await state.get_data()
    if 'birthday' not in user_data or user_data['birthday'] is None:
        birthday = message.text
        check_birthday_format = await check_format(birthday)
        if check_birthday_format:
            age_confirmed = await check_age(birthday)
            if age_confirmed:
                await state.update_data(birthday=birthday)
                key = await exit_back_keyboard()
                await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ', reply_markup=key)
                await state.set_state(GetOrderState.name_input)
            else:
                await state.set_state(GetOrderState.exit_input)
                await incorrect_age_order(message)
        else:
            await incorrect_date_format(message)
    else:
        key = await exit_back_keyboard()
        await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ', reply_markup=key)
        await state.set_state(GetOrderState.name_input)


@router.message(GetOrderState.city_input, F.text == '–ù–µ—Ç')
@router.message(GetOrderState.name_input)
async def get_surname(message: types.Message, state: FSMContext):
    """
        Handle user data input for the user's surname during the order creation process.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The FSM context for maintaining conversation state.
    """
    user_data = await state.get_data()
    if 'name' not in user_data or user_data['name'] is None:
        name = message.text
        await state.update_data(name=name)
        key = await exit_back_keyboard()
        await message.answer(
            f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}! –ß—É–≤—Å—Ç–≤—É—é, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è! üôÇ\n\nüëçüèº –£—Ä–∞!! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è '
            f'—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ê –≤ –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?', reply_markup=key)
        await state.set_state(GetOrderState.city_input)
    else:
        name = user_data['name']
        key = await exit_back_keyboard()
        await message.answer(
            f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}! –ß—É–≤—Å—Ç–≤—É—é, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è! üôÇ\n\nüëçüèº –£—Ä–∞!! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è '
            f'—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ê –≤ –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?',
            reply_markup=key)
        await state.set_state(GetOrderState.city_input)


@router.message(GetOrderState.item_input, F.text == '–ù–µ—Ç')
@router.message(GetOrderState.city_input)
async def get_city(message: types.Message, state: FSMContext):
    """
        Handle user data input for the user's city during the order creation process.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The FSM context for maintaining conversation state.
    """
    user_data = await state.get_data()
    if 'city' not in user_data or user_data['city'] is None:
        city = message.text
        await state.update_data(city=city)
        key = await items_exit_keyboard()
        await message.answer(
            f'{city} - –ö–ª–∞—Å—Å–Ω—ã–π –≥–æ—Ä–æ–¥! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ —Ç–æ –±—ã —è —Å–∞–º –¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n–ù–æ —è –∑–Ω–∞—é –ª—é–¥–µ–π –∏–∑ –Ω–∞—à–µ–π '
            f'–∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç.üï∫üèº\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', reply_markup=key)
        await state.set_state(GetOrderState.item_input)
    else:
        city = user_data['city']
        key = await items_exit_keyboard()
        await message.answer(
            f'{city} - –ö–ª–∞—Å—Å–Ω—ã–π –≥–æ—Ä–æ–¥! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ —Ç–æ –±—ã —è —Å–∞–º –¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n–ù–æ —è –∑–Ω–∞—é –ª—é–¥–µ–π –∏–∑ –Ω–∞—à–µ–π '
            f'–∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç.üï∫üèº\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:',
            reply_markup=key)
        await state.set_state(GetOrderState.item_input)


@router.message(GetOrderState.address_input, F.text == '–ù–µ—Ç')
@router.message(GetOrderState.item_input, F.text == '–ü–æ–¥-—Å–∏—Å—Ç–µ–º–∞')
@router.message(GetOrderState.item_input, F.text == '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
@router.message(GetOrderState.item_input, F.text == '–ò–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
async def get_item(message: types.Message, state: FSMContext):
    """
        Handle user data input for the selected item during the order creation process.

        Args:
            message (types.Message): The message from the user.
            state (FSMContext): The FSM context for maintaining conversation state.
    """
    item = message.text
    user_data = await state.get_data()
    if 'item' not in user_data or user_data['item'] is None:
        await state.update_data(item=item)
        key = await location_share_keyboard()
        await message.answer('–°–∫–∏–Ω—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Åüìç, –º—ã –ø–æ–∫–∞–∂–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏:', reply_markup=key.as_markup(resize_keyboard=True))
        await state.set_state(GetOrderState.address_input)
    else:
        key = await location_share_keyboard()
        await message.answer('–°–∫–∏–Ω—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Åüìç, –º—ã –ø–æ–∫–∞–∂–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏:', reply_markup=key.as_markup(resize_keyboard=True))
        await state.set_state(GetOrderState.address_input)


@router.message(GetOrderState.item_input, F.text)
async def wrong_item_input(message, state):
    """
        Handles incorrect input for the selected item in the order process.

        Args:
            message (types.Message): The message object containing user information.
            state (FSMContext): The FSM (Finite State Machine) context.
    """
    key = await items_exit_keyboard()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', reply_markup=key)
    await state.set_state(GetOrderState.item_input)


@router.message(GetOrderState.address_input)
async def confirm_order(message, state):
    """
        Handles the confirmation of an order and stores it in the database.

        Args:
            message (types.Message): The message object containing user information.
            state (FSMContext): The FSM (Finite State Machine) context.
    """
    if message.location:
        address = str(message.location)
    elif message.text:
        address = message.text
    await state.update_data(address=address)
    user_data = await state.get_data()
    await message.answer('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!', reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await add_order_to_db(message, user_data)

